generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TypeEnum {
  MOVIE
  TV
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model RatedMovie {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  isBest    Boolean
  poster    String?
  rated     Float
  title     String
  type      TypeEnum
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String       @unique
  emailVerified Json?
  image         String
  isVisibleRate Boolean      @default(true)
  name          String
  Account       Account[]
  Session       Session[]
  RatedMovie    RatedMovie[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier Json?
  token      Json?    @unique
  expires    DateTime

  @@unique([identifier, token])
}
